---
title: "ch4"
format: html
editor: source
---

## 4.3 Gaussian Model of height
```{r}
library(rethinking)
library(tidyverse)
data(Howell1)
d <- Howell1

str(d)

precis(d)

d2 <- d[d$age >= 18, ]

curve(dnorm(x, 178, 20), from = 100, to = 250)
curve(dnorm(x, 69, 15), from = 25, to = 120)

ggplot(as_tibble(rnorm(1e4, 69, 15)), 
       aes(value)) + 
  geom_density() +
  geom_vline(xintercept = 25) +
  geom_vline(xintercept = 120)

curve(dunif(x, min = 0, max = 50), from = -10, to = 60)

```

4.14
```{r}
sample_mu <- rnorm (1e4, 179, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
ggplot( as_tibble(prior_h ) , aes(value) ) +
  geom_density() +
  geom_vline(xintercept = 179, color = "red")
max(prior_h)

```


```{r}
sample_mu <- rnorm(1e4, 178, 100)
dens(sample_mu)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
ggplot(as_tibble(prior_h), aes(value)) +
  geom_density() +
  geom_vline(xintercept = 272, color = "grey") +
  geom_vline(xintercept = 0, color = "blue", linetype = 'dotdash') +
  theme_minimal()

```

## 4.3.3 Gird approximation of the posterior distribution
```{r}
mu.list <- seq(from = 150, to = 160, length.out = 100)
sigma.list <- seq( from = 7, to = 9, length.out = 100)
post <- expand.grid(mu = mu.list, sigma = sigma.list)
post$LL <- sapply(1:nrow(post), function(i) sum(
  dnorm( d2$height, post$mu[i], post$sigma[i], log = TRUE)))
post$prod <- post$LL + dnorm(post$mu, 178, 20, TRUE) +
    dunif( post$sigma, 0, 50, TRUE)
  post$prob <- exp(post$prod - max(post$prod))

contour_xyz(post$mu, post$sigma, post$prob)

image_xyz(post$mu, post$sigma, post$prob)

```

## 4.4 Linear prediction

```{r}
library(rethinking)
data(Howell1); d <- Howell1; d2 <- d[ d$age >= 18, ]

plot( d$height - d$weight)
# 
# plot( d2$height - d2$weight)
# plot(d3$age, d3$weight)
# plot(d3$age - d3$weight)
# cor(d3$age, d3$weight)
# cor(d3$age, d3$weight)
# plot(d2$age, d2$weight)
# cor(d2$age, d2$weight)
# plot(d2$age - d2$weight)
# 
# names(d2)

summary(d2$age)
```


### 4.4.1 The linear model strategy

```{r}
set.seed(2971)
N <- 1e2
a <- rnorm(N, 178, 20)
b <- rlnorm(N, 0, 1)
dens(b, xlim= c(0,5), adj = 0.1)
 
plot( NULL, xlim = range(d2$weight), ylim = c(-100, 400),
      xlab = "weight", ylab = "height" )
abline(h=0, lty=2)
abline(h = 272, lty=1, lwd=0.5)
mtext("b ~ dnorm(0,10)")
xbar <- mean(d2$weight)
for (i in 1:N) curve(a[i] + b[i] *(x - xbar),
    from=min(d2$weight), to=max(d2$weight), add=TRUE,
    col=col.alpha("black",0.2))
```

```{r}
m4.3 <- quap(
  alist(
    height ~ dnorm( mu, sigma ),
    mu <- a + b*( weight - xbar ),
    a ~ dnorm( 178, 20 ),
    b ~ dlnorm( 0, 1 ),
    sigma ~ dunif( 0, 50 )
  ), 
  data=d2 )
  
m4.3b <- quap(
  alist(
    height ~ dnorm( mu, sigma ),
    mu <- a + exp(log_b)*( weight - xbar ),
    a ~ dnorm( 178, 20 ),
    log_b ~ dlnorm( 0, 1 ),
    sigma ~ dunif( 0, 50 )
  ), 
  data=d2 )

precis(m4.3)
precis(m4.3b)
  
round(vcov(m4.3), 3)
```
```{r}
plot(height ~ weight, data = d2, col = rangi2)
post <- extract.samples(m4.3)
(a_map <- mean(post$a))
(b_map <- mean(post$b))
curve( a_map + b_map*(x - xbar), add = TRUE )
```
```{r}
post <- extract.samples(m4.3)
post[1:5,]
```
```{r}
map(seq(from = 10, to = 352, by = 10), function(N) {
  # N <- 50
  message(N)
dN <- d2[1:N, ]
mN <- quap(
  alist(
    height ~ dnorm( mu, sigma ),
    mu <- a + b*( weight - xbar ),
    a ~ dnorm( 178, 20 ),
    b ~ dlnorm( 0, 1 ),
    sigma ~ dunif( 0, 50 )
  ), 
  data=dN )

#extract 20 samples from teh posterior
post <- extract.samples(mN, n = 20)

#display raw data and sample size
plot( dN$weight, dN$height,
      xlim = range(d2$weight), ylim = range(d2$height) ,
      col = rangi2, xlab = 'weight', ylab = 'height' )
mtext(concat("N = ", N))

# plot the lines, with transparency
for(i in 1:20) 
  curve( post$a[i] + post$b[i]*(x - mean(dN$weight)),
                      add = TRUE, col = col.alpha("black", 0.3) )
})

```

```{r}
post <- extract.samples(m4.3)
mu_at_50 <- post$a + post$b*(50 - mean(d2$weight))

dens(mu_at_50, col = rangi2, lwd = 2, xlab = "mu|weight=50", show.HPDI = 0.50)
dens(mu_at_50, col = rangi2, lwd = 2, xlab = "mu|weight=50", show.HPDI = 0.95)
#add a line to the density plot the using the result of PI with prob = 0.35
PI(mu_at_50, prob = 0.35)

PI(mu_at_50, prob = 0.89)
```




```{r}
mu <- link(m4.3)
str(mu)

#define sequence of weights to compute predictions for these values will
# be on the horizontal axis
weight.seq <- seq(from = 25, to = 70, by = 1)

#use link to compute mu for each sample from posterior and for each wight in weight.seq
mu <- link(m4.3, data = data.frame(weight = weight.seq))
str(mu)


# use type = "n" to hide raw data
plot(height ~ weight, data = d2, type = "n")
#loop over samples and plot each mu value
for(i in 1:100)
  points(weight.seq, mu[i, ], pch = 16, col = col.alpha(rangi2, 0.1))

```

```{r}
# summarise the distribution of mu
(mu.mean <- apply(mu, 2, mean))
(mu.PI <- apply(mu, 2, PI, prob = 0.89))
```

```{r}
#plot raw data
# fading out points to make line and interval more visible
plot(height ~ weight, data = d2, col = col.alpha(rangi2, 0.5))
#plot the map line, aka the mean mu for each weight
lines(weight.seq, mu.mean)
#plot a shaded region for 89% PI
shade(mu.PI, weight.seq)
```

### 4.4.3 Prediction Intervals
```{r}
sim.height <- sim(m4.3, data = list(weight = weight.seq), n = 1e2)

str(sim.height)

height.PI <- apply(sim.height, 2, PI, prob = 0.95)

#plot raw data
plot(height ~ weight, data = d2, col = col.alpha(rangi2, 0.5))
#draw MAP line
lines(weight.seq, mu.mean)
#draw HPDI region for line
shade(mu.PI, weight.seq)
#draw PI region for simulated heights
shade(height.PI, weight.seq)
```








































